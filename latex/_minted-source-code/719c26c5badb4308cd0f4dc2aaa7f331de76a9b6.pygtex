\begin{Verbatim}[commandchars=\\\{\}]
\PYG{k+kr}{import} \PYG{p}{\PYGZob{}}\PYG{n+nx}{Contact}\PYG{p}{,} \PYG{n+nx}{File}\PYG{p}{,} \PYG{n+nx}{Message}\PYG{p}{,} \PYG{n+nx}{React}\PYG{p}{\PYGZcb{}} \PYG{n+nx}{from} \PYG{l+s+s1}{\PYGZsq{}nylas\PYGZhy{}exports\PYGZsq{}}\PYG{p}{;}

\PYG{k+kr}{import} \PYG{n+nx}{EmailPGPStore} \PYG{n+nx}{from} \PYG{l+s+s1}{\PYGZsq{}../lib/email\PYGZhy{}pgp\PYGZhy{}store\PYGZsq{}}\PYG{p}{;}
\PYG{k+kr}{import} \PYG{n+nx}{MessageLoaderHeader} \PYG{n+nx}{from} \PYG{l+s+s1}{\PYGZsq{}../lib/message\PYGZhy{}loader/message\PYGZhy{}loader\PYGZhy{}header\PYGZsq{}}\PYG{p}{;}

\PYG{k+kd}{let} \PYG{n+nx}{ReactTestUtils} \PYG{o}{=} \PYG{n+nx}{React}\PYG{p}{.}\PYG{n+nx}{addons}\PYG{p}{.}\PYG{n+nx}{TestUtils}\PYG{p}{;}
\PYG{k+kd}{let} \PYG{n+nx}{me} \PYG{o}{=} \PYG{k}{new} \PYG{n+nx}{Contact}\PYG{p}{(\PYGZob{}}
  \PYG{n+nx}{name}\PYG{o}{:} \PYG{n+nx}{TEST\PYGZus{}ACCOUNT\PYGZus{}NAME}\PYG{p}{,}
  \PYG{n+nx}{email}\PYG{o}{:} \PYG{n+nx}{TEST\PYGZus{}ACCOUNT\PYGZus{}EMAIL}
\PYG{p}{\PYGZcb{});}

\PYG{n+nx}{describe}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}MessageLoaderHeader\PYGZdq{}}\PYG{p}{,} \PYG{k+kd}{function}\PYG{p}{()} \PYG{p}{\PYGZob{}}
  \PYG{n+nx}{beforeEach}\PYG{p}{(}\PYG{k+kd}{function}\PYG{p}{()} \PYG{p}{\PYGZob{}}
    \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{message} \PYG{o}{=} \PYG{k}{new} \PYG{n+nx}{Message}\PYG{p}{(\PYGZob{}}
      \PYG{n+nx}{from}\PYG{o}{:} \PYG{p}{[}\PYG{n+nx}{me}\PYG{p}{],}
      \PYG{n+nx}{to}\PYG{o}{:} \PYG{p}{[}\PYG{n+nx}{me}\PYG{p}{],}
      \PYG{n+nx}{cc}\PYG{o}{:} \PYG{p}{[],}
      \PYG{n+nx}{bcc}\PYG{o}{:} \PYG{p}{[]}
    \PYG{p}{\PYGZcb{});}
    \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{component} \PYG{o}{=} \PYG{n+nx}{ReactTestUtils}\PYG{p}{.}\PYG{n+nx}{renderIntoDocument}\PYG{p}{(}
      \PYG{o}{\PYGZlt{}}\PYG{n+nx}{MessageLoaderHeader} \PYG{n+nx}{message}\PYG{o}{=}\PYG{p}{\PYGZob{}}\PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{message}\PYG{p}{\PYGZcb{}} \PYG{o}{/\PYGZgt{}}
    \PYG{p}{);}
  \PYG{p}{\PYGZcb{});}

  \PYG{n+nx}{it}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}should render into the page\PYGZdq{}}\PYG{p}{,} \PYG{k+kd}{function}\PYG{p}{()} \PYG{p}{\PYGZob{}}
    \PYG{n+nx}{expect}\PYG{p}{(}\PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{component}\PYG{p}{).}\PYG{n+nx}{toBeDefined}\PYG{p}{();}
  \PYG{p}{\PYGZcb{});}

  \PYG{n+nx}{it}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}should have a displayName\PYGZdq{}}\PYG{p}{,} \PYG{k+kd}{function}\PYG{p}{()} \PYG{p}{\PYGZob{}}
    \PYG{n+nx}{expect}\PYG{p}{(}\PYG{n+nx}{MessageLoaderHeader}\PYG{p}{.}\PYG{n+nx}{displayName}\PYG{p}{).}\PYG{n+nx}{toBe}\PYG{p}{(}\PYG{l+s+s1}{\PYGZsq{}MessageLoader\PYGZsq{}}\PYG{p}{);}
  \PYG{p}{\PYGZcb{});}

  \PYG{n+nx}{describe}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}when not decrypting\PYGZdq{}}\PYG{p}{,} \PYG{k+kd}{function}\PYG{p}{()} \PYG{p}{\PYGZob{}}
    \PYG{n+nx}{beforeEach}\PYG{p}{(}\PYG{k+kd}{function}\PYG{p}{()} \PYG{p}{\PYGZob{}}
      \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{component}\PYG{p}{.}\PYG{n+nx}{setState}\PYG{p}{(\PYGZob{}}\PYG{n+nx}{decrypting}\PYG{o}{:} \PYG{k+kc}{false}\PYG{p}{\PYGZcb{});}
    \PYG{p}{\PYGZcb{});}

    \PYG{n+nx}{it}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}should have no child elements\PYGZdq{}}\PYG{p}{,} \PYG{k+kd}{function}\PYG{p}{()} \PYG{p}{\PYGZob{}}
      \PYG{n+nx}{expect}\PYG{p}{(}\PYG{n+nx}{React}\PYG{p}{.}\PYG{n+nx}{findDOMNode}\PYG{p}{(}\PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{component}\PYG{p}{).}\PYG{n+nx}{childElementCount}\PYG{p}{).}\PYG{n+nx}{toEqual}\PYG{p}{(}\PYG{l+m+mi}{0}\PYG{p}{);}
    \PYG{p}{\PYGZcb{});}
  \PYG{p}{\PYGZcb{});}

  \PYG{n+nx}{describe}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}when decrypting\PYGZdq{}}\PYG{p}{,} \PYG{k+kd}{function}\PYG{p}{()} \PYG{p}{\PYGZob{}}
    \PYG{n+nx}{beforeEach}\PYG{p}{(}\PYG{k+kd}{function}\PYG{p}{()} \PYG{p}{\PYGZob{}}
      \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{component}\PYG{p}{.}\PYG{n+nx}{setState}\PYG{p}{(\PYGZob{}}\PYG{n+nx}{decrypting}\PYG{o}{:} \PYG{k+kc}{true}\PYG{p}{\PYGZcb{});}
    \PYG{p}{\PYGZcb{});}

    \PYG{n+nx}{it}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}should have one single child element\PYGZdq{}}\PYG{p}{,} \PYG{k+kd}{function}\PYG{p}{()} \PYG{p}{\PYGZob{}}
      \PYG{n+nx}{expect}\PYG{p}{(}\PYG{n+nx}{React}\PYG{p}{.}\PYG{n+nx}{findDOMNode}\PYG{p}{(}\PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{component}\PYG{p}{).}\PYG{n+nx}{childElementCount}\PYG{p}{).}\PYG{n+nx}{toEqual}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{p}{);}
    \PYG{p}{\PYGZcb{});}
  \PYG{p}{\PYGZcb{});}

  \PYG{n+nx}{it}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}should throw when text input to multipart parser is null\PYGZdq{}}\PYG{p}{,} \PYG{k+kd}{function}\PYG{p}{()} \PYG{p}{\PYGZob{}}
    \PYG{k+kd}{let} \PYG{n+nx}{text} \PYG{o}{=} \PYG{k+kc}{null}\PYG{p}{;}
    \PYG{n+nx}{expect}\PYG{p}{(()} \PYG{o}{=\PYGZgt{}} \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{component}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}extractHTML}\PYG{p}{(}\PYG{n+nx}{text}\PYG{p}{)).}\PYG{n+nx}{toThrow}\PYG{p}{();}
  \PYG{p}{\PYGZcb{});}

  \PYG{c+c1}{//it \PYGZdq{}should show a dialog box when clicked\PYGZdq{}, function() \PYGZob{}}
    \PYG{c+c1}{//spyOn(@component, \PYGZsq{}\PYGZus{}onClick\PYGZsq{});}
    \PYG{c+c1}{//buttonNode = React.findDOMNode(this.component.refs.button);}
    \PYG{c+c1}{//ReactTestUtils.Simulate.click(buttonNode);}
    \PYG{c+c1}{//expect(@component.\PYGZus{}onClick).toHaveBeenCalled();}
  \PYG{c+c1}{//\PYGZcb{});}
\PYG{p}{\PYGZcb{});}
\end{Verbatim}

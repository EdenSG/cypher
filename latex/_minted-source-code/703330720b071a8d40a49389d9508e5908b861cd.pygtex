\begin{Verbatim}[commandchars=\\\{\}]
\PYG{k+kr}{import} \PYG{n+nx}{child\PYGZus{}process} \PYG{n+nx}{from} \PYG{l+s+s1}{\PYGZsq{}child\PYGZus{}process\PYGZsq{}}\PYG{p}{;}
\PYG{k+kr}{import} \PYG{n+nx}{readline} \PYG{n+nx}{from} \PYG{l+s+s1}{\PYGZsq{}readline\PYGZsq{}}\PYG{p}{;}
\PYG{k+kr}{import} \PYG{n+nx}{nylasExports} \PYG{n+nx}{from} \PYG{l+s+s1}{\PYGZsq{}nylas\PYGZhy{}exports\PYGZsq{}}\PYG{p}{;}

\PYG{k+kr}{import} \PYG{n+nx}{debugSettings} \PYG{n+nx}{from} \PYG{l+s+s1}{\PYGZsq{}./debug\PYGZhy{}settings\PYGZsq{}}\PYG{p}{;}
\PYG{k+kr}{import} \PYG{n+nx}{debugInitialize} \PYG{n+nx}{from} \PYG{l+s+s1}{\PYGZsq{}debug/browser\PYGZsq{}}\PYG{p}{;}
\PYG{k+kr}{import} \PYG{n+nx}{smalltalk} \PYG{n+nx}{from} \PYG{l+s+s1}{\PYGZsq{}smalltalk\PYGZsq{}}\PYG{p}{;}
\PYG{k+kr}{import} \PYG{n+nx}{uuid} \PYG{n+nx}{from} \PYG{l+s+s1}{\PYGZsq{}uuid\PYGZsq{}}\PYG{p}{;}

\PYG{k+kr}{import} \PYG{n+nx}{proto} \PYG{n+nx}{from} \PYG{l+s+s1}{\PYGZsq{}./worker/worker\PYGZhy{}protocol\PYGZsq{}}\PYG{p}{;}
\PYG{k+kr}{import} \PYG{n+nx}{FlowError} \PYG{n+nx}{from} \PYG{l+s+s1}{\PYGZsq{}./flow\PYGZhy{}error\PYGZsq{}}\PYG{p}{;}

\PYG{k+kr}{const} \PYG{n+nx}{debug} \PYG{o}{=} \PYG{n+nx}{debugInitialize}\PYG{p}{(}\PYG{l+s+s1}{\PYGZsq{}WorkerFrontend\PYGZsq{}}\PYG{p}{);}

\PYG{k+kr}{class} \PYG{n+nx}{WorkerFrontend} \PYG{p}{\PYGZob{}}
  \PYG{n+nx}{constructor}\PYG{p}{()} \PYG{p}{\PYGZob{}}
    \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}workerEntryScriptPath} \PYG{o}{=} \PYG{n+nx}{path}\PYG{p}{.}\PYG{n+nx}{join}\PYG{p}{(}\PYG{n+nx}{\PYGZus{}\PYGZus{}dirname}\PYG{p}{,} \PYG{l+s+s1}{\PYGZsq{}worker\PYGZsq{}}\PYG{p}{,} \PYG{l+s+s1}{\PYGZsq{}worker\PYGZhy{}entry.js\PYGZsq{}}\PYG{p}{);}
    \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}pendingPromises} \PYG{o}{=} \PYG{p}{\PYGZob{}\PYGZcb{};}

    \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{decrypt} \PYG{o}{=} \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{decrypt}\PYG{p}{.}\PYG{n+nx}{bind}\PYG{p}{(}\PYG{k}{this}\PYG{p}{);}
    \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{initialize} \PYG{o}{=} \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{initialize}\PYG{p}{.}\PYG{n+nx}{bind}\PYG{p}{(}\PYG{k}{this}\PYG{p}{);}
    \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}forkProcess} \PYG{o}{=} \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}forkProcess}\PYG{p}{.}\PYG{n+nx}{bind}\PYG{p}{(}\PYG{k}{this}\PYG{p}{);}
    \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}requestPassphrase} \PYG{o}{=} \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}requestPassphrase}\PYG{p}{.}\PYG{n+nx}{bind}\PYG{p}{(}\PYG{k}{this}\PYG{p}{);}

    \PYG{n+nx}{global}\PYG{p}{.}\PYG{n+nx}{\PYGZdl{}pgpWorkerFrontend} \PYG{o}{=} \PYG{k}{this}\PYG{p}{;}
  \PYG{p}{\PYGZcb{}}

  \PYG{n+nx}{decrypt}\PYG{p}{(}\PYG{n+nx}{notify}\PYG{p}{,} \PYG{n+nx}{armored}\PYG{p}{,} \PYG{n+nx}{secretKey}\PYG{p}{)} \PYG{p}{\PYGZob{}}
    \PYG{k+kd}{let} \PYG{n+nx}{id} \PYG{o}{=} \PYG{n+nx}{uuid}\PYG{p}{();}

    \PYG{k}{return} \PYG{k}{new} \PYG{n+nb}{Promise}\PYG{p}{((}\PYG{n+nx}{resolve}\PYG{p}{,} \PYG{n+nx}{reject}\PYG{p}{)} \PYG{o}{=\PYGZgt{}} \PYG{p}{\PYGZob{}}
      \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}pendingPromises}\PYG{p}{[}\PYG{n+nx}{id}\PYG{p}{]} \PYG{o}{=} \PYG{p}{\PYGZob{}}\PYG{n+nx}{resolve}\PYG{p}{,} \PYG{n+nx}{reject}\PYG{p}{,} \PYG{n+nx}{notify}\PYG{p}{\PYGZcb{};}

      \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}child}\PYG{p}{.}\PYG{n+nx}{send}\PYG{p}{(\PYGZob{}} \PYG{n+nx}{method}\PYG{o}{:} \PYG{n+nx}{proto}\PYG{p}{.}\PYG{n+nx}{DECRYPT}\PYG{p}{,} \PYG{n+nx}{id}\PYG{p}{,} \PYG{n+nx}{armored}\PYG{p}{,} \PYG{n+nx}{secretKey} \PYG{p}{\PYGZcb{});}
    \PYG{p}{\PYGZcb{});}
  \PYG{p}{\PYGZcb{}}

  \PYG{c+c1}{// Called by `main.es6` when the `windowType` matches either `default` or}
  \PYG{c+c1}{// `composer`}
  \PYG{n+nx}{initialize}\PYG{p}{()} \PYG{p}{\PYGZob{}}
    \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}forkProcess}\PYG{p}{();}
  \PYG{p}{\PYGZcb{}}

  \PYG{n+nx}{\PYGZus{}forkProcess}\PYG{p}{()} \PYG{p}{\PYGZob{}}
    \PYG{c+c1}{// We need to find out the path of the compile\PYGZhy{}cache module so we can}
    \PYG{c+c1}{// pass it on to the worker process, use the hijacked require to ensure it}
    \PYG{c+c1}{// is in the module cache}
    \PYG{k+kd}{let} \PYG{n+nx}{compileCache} \PYG{o}{=} \PYG{n+nx}{nylasExports}\PYG{p}{.}\PYG{n+nx}{require}\PYG{p}{(}\PYG{l+s+s1}{\PYGZsq{}PGP\PYGZhy{}CompileCache\PYGZsq{}}\PYG{p}{,} \PYG{l+s+s1}{\PYGZsq{}compile\PYGZhy{}cache\PYGZsq{}}\PYG{p}{);}
    \PYG{k+kd}{let} \PYG{n+nx}{compileCachePath} \PYG{o}{=} \PYG{n+nx}{compileCache}\PYG{p}{.}\PYG{n+nx}{getCacheDirectory}\PYG{p}{();}

    \PYG{k+kd}{var} \PYG{n+nx}{modulePath} \PYG{o}{=} \PYG{l+s+s1}{\PYGZsq{}\PYGZsq{}}\PYG{p}{;}
    \PYG{n+nb}{Object}\PYG{p}{.}\PYG{n+nx}{keys}\PYG{p}{(}\PYG{n+nx}{require}\PYG{p}{.}\PYG{n+nx}{cache}\PYG{p}{).}\PYG{n+nx}{some}\PYG{p}{((}\PYG{n+nx}{module}\PYG{p}{)} \PYG{o}{=\PYGZgt{}} \PYG{p}{\PYGZob{}}
      \PYG{k}{if} \PYG{p}{(}\PYG{n+nx}{module}\PYG{p}{.}\PYG{n+nx}{match}\PYG{p}{(}\PYG{l+s+sr}{/compile\PYGZhy{}cache/}\PYG{p}{))} \PYG{p}{\PYGZob{}}
        \PYG{n+nx}{modulePath} \PYG{o}{=} \PYG{n+nx}{module}\PYG{p}{;}
        \PYG{k}{return} \PYG{k+kc}{true}\PYG{p}{;}
      \PYG{p}{\PYGZcb{}}
    \PYG{p}{\PYGZcb{});}

    \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}child} \PYG{o}{=} \PYG{n+nx}{child\PYGZus{}process}\PYG{p}{.}\PYG{n+nx}{fork}\PYG{p}{(}\PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}workerEntryScriptPath}\PYG{p}{,} \PYG{p}{\PYGZob{}}
      \PYG{n+nx}{env}\PYG{o}{:} \PYG{n+nb}{Object}\PYG{p}{.}\PYG{n+nx}{assign}\PYG{p}{(\PYGZob{}\PYGZcb{},} \PYG{n+nx}{process}\PYG{p}{.}\PYG{n+nx}{env}\PYG{p}{,} \PYG{p}{\PYGZob{}}
        \PYG{n+nx}{DEBUG}\PYG{o}{:} \PYG{l+s+s1}{\PYGZsq{}*\PYGZsq{}}\PYG{p}{,}
        \PYG{n+nx}{PGP\PYGZus{}COMPILE\PYGZus{}CACHE\PYGZus{}MODULE\PYGZus{}PATH}\PYG{o}{:} \PYG{n+nx}{modulePath}\PYG{p}{,}
        \PYG{n+nx}{PGP\PYGZus{}COMPILE\PYGZus{}CACHE\PYGZus{}PATH}\PYG{o}{:} \PYG{n+nx}{compileCachePath}\PYG{p}{,}
        \PYG{n+nx}{PGP\PYGZus{}CONFIG\PYGZus{}DIR\PYGZus{}PATH}\PYG{o}{:} \PYG{n+nx}{NylasEnv}\PYG{p}{.}\PYG{n+nx}{getConfigDirPath}\PYG{p}{()}
      \PYG{p}{\PYGZcb{}),}
      \PYG{n+nx}{silent}\PYG{o}{:} \PYG{k+kc}{true}
    \PYG{p}{\PYGZcb{});}

    \PYG{k+kr}{const} \PYG{n+nx}{rlOut} \PYG{o}{=} \PYG{n+nx}{readline}\PYG{p}{.}\PYG{n+nx}{createInterface}\PYG{p}{(\PYGZob{}}
      \PYG{n+nx}{input}\PYG{o}{:} \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}child}\PYG{p}{.}\PYG{n+nx}{stdout}\PYG{p}{,}
      \PYG{n+nx}{terminal}\PYG{o}{:} \PYG{k+kc}{false}
    \PYG{p}{\PYGZcb{});}
    \PYG{k+kr}{const} \PYG{n+nx}{rlErr} \PYG{o}{=} \PYG{n+nx}{readline}\PYG{p}{.}\PYG{n+nx}{createInterface}\PYG{p}{(\PYGZob{}}
      \PYG{n+nx}{input}\PYG{o}{:} \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}child}\PYG{p}{.}\PYG{n+nx}{stderr}\PYG{p}{,}
      \PYG{n+nx}{terminal}\PYG{o}{:} \PYG{k+kc}{false}
    \PYG{p}{\PYGZcb{});}

    \PYG{n+nx}{rlOut}\PYG{p}{.}\PYG{n+nx}{on}\PYG{p}{(}\PYG{l+s+s1}{\PYGZsq{}line\PYGZsq{}}\PYG{p}{,} \PYG{p}{(}\PYG{n+nx}{data}\PYG{p}{)} \PYG{o}{=\PYGZgt{}} \PYG{p}{\PYGZob{}}
      \PYG{n+nx}{debug}\PYG{p}{(}\PYG{l+s+s1}{\PYGZsq{}[child.stdout] \PYGZpc{}s\PYGZsq{}}\PYG{p}{,} \PYG{n+nx}{data}\PYG{p}{);}
    \PYG{p}{\PYGZcb{});}
    \PYG{n+nx}{rlErr}\PYG{p}{.}\PYG{n+nx}{on}\PYG{p}{(}\PYG{l+s+s1}{\PYGZsq{}line\PYGZsq{}}\PYG{p}{,} \PYG{p}{(}\PYG{n+nx}{data}\PYG{p}{)} \PYG{o}{=\PYGZgt{}} \PYG{p}{\PYGZob{}}
      \PYG{n+nx}{debug}\PYG{p}{(}\PYG{l+s+s1}{\PYGZsq{}[child.stderr] \PYGZpc{}s\PYGZsq{}}\PYG{p}{,} \PYG{n+nx}{data}\PYG{p}{);}
    \PYG{p}{\PYGZcb{});}

    \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}child}\PYG{p}{.}\PYG{n+nx}{on}\PYG{p}{(}\PYG{l+s+s1}{\PYGZsq{}message\PYGZsq{}}\PYG{p}{,} \PYG{p}{(}\PYG{n+nx}{message}\PYG{p}{)} \PYG{o}{=\PYGZgt{}} \PYG{p}{\PYGZob{}}
      \PYG{k}{if} \PYG{p}{(}\PYG{n+nx}{message}\PYG{p}{.}\PYG{n+nx}{method} \PYG{o}{===} \PYG{n+nx}{proto}\PYG{p}{.}\PYG{n+nx}{ERROR\PYGZus{}OCCURRED}\PYG{p}{)} \PYG{p}{\PYGZob{}}
        \PYG{c+c1}{// ERROR\PYGZus{}OCCURRED}
        \PYG{k+kd}{let} \PYG{n+nx}{error} \PYG{o}{=} \PYG{k}{new} \PYG{n+nx}{FlowError}\PYG{p}{(}\PYG{n+nx}{message}\PYG{p}{.}\PYG{n+nx}{errorMessage} \PYG{o}{||} \PYG{l+s+s1}{\PYGZsq{}unknown error, check error.childStackTrace\PYGZsq{}}\PYG{p}{,} \PYG{k+kc}{true}\PYG{p}{);}
        \PYG{n+nx}{error}\PYG{p}{.}\PYG{n+nx}{childStackTrace} \PYG{o}{=} \PYG{n+nx}{message}\PYG{p}{.}\PYG{n+nx}{errorStackTrace}\PYG{p}{;}
        \PYG{n+nx}{console}\PYG{p}{.}\PYG{n+nx}{error}\PYG{p}{(}\PYG{l+s+s1}{\PYGZsq{}[PGP \PYGZhy{} WorkerFrontend] Error from worker:\PYGZsq{}}\PYG{p}{,} \PYG{n+nx}{error}\PYG{p}{);}
        \PYG{n+nx}{console}\PYG{p}{.}\PYG{n+nx}{error}\PYG{p}{(}\PYG{n+nx}{error}\PYG{p}{.}\PYG{n+nx}{childStackTrace}\PYG{p}{);}
      \PYG{p}{\PYGZcb{}} \PYG{k}{else} \PYG{k}{if} \PYG{p}{(}\PYG{n+nx}{message}\PYG{p}{.}\PYG{n+nx}{method} \PYG{o}{===} \PYG{n+nx}{proto}\PYG{p}{.}\PYG{n+nx}{VERBOSE\PYGZus{}OUT}\PYG{p}{)} \PYG{p}{\PYGZob{}}
        \PYG{c+c1}{// VERBOSE\PYGZus{}OUT}
        \PYG{n+nx}{debug}\PYG{p}{(}\PYG{l+s+s1}{\PYGZsq{}[Verbose] \PYGZpc{}s\PYGZsq{}}\PYG{p}{,} \PYG{n+nx}{message}\PYG{p}{.}\PYG{n+nx}{message}\PYG{p}{);}
      \PYG{p}{\PYGZcb{}} \PYG{k}{else} \PYG{k}{if} \PYG{p}{(}\PYG{n+nx}{message}\PYG{p}{.}\PYG{n+nx}{method} \PYG{o}{===} \PYG{n+nx}{proto}\PYG{p}{.}\PYG{n+nx}{REQUEST\PYGZus{}PASSPHRASE}\PYG{p}{)} \PYG{p}{\PYGZob{}}
        \PYG{c+c1}{// REQUEST\PYGZus{}PASSPHRASE}
        \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}requestPassphrase}\PYG{p}{(}\PYG{n+nx}{message}\PYG{p}{.}\PYG{n+nx}{id}\PYG{p}{,} \PYG{n+nx}{message}\PYG{p}{.}\PYG{n+nx}{message}\PYG{p}{);}
      \PYG{p}{\PYGZcb{}} \PYG{k}{else} \PYG{k}{if} \PYG{p}{(}\PYG{n+nx}{message}\PYG{p}{.}\PYG{n+nx}{method} \PYG{o}{===} \PYG{n+nx}{proto}\PYG{p}{.}\PYG{n+nx}{DECRYPTION\PYGZus{}RESULT}\PYG{p}{)} \PYG{p}{\PYGZob{}}
        \PYG{c+c1}{// DECRYPTION\PYGZus{}RESULT}
        \PYG{k}{if} \PYG{p}{(}\PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}pendingPromises}\PYG{p}{[}\PYG{n+nx}{message}\PYG{p}{.}\PYG{n+nx}{id}\PYG{p}{])} \PYG{p}{\PYGZob{}}
          \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}pendingPromises}\PYG{p}{[}\PYG{n+nx}{message}\PYG{p}{.}\PYG{n+nx}{id}\PYG{p}{].}\PYG{n+nx}{resolve}\PYG{p}{(}\PYG{n+nx}{message}\PYG{p}{.}\PYG{n+nx}{result}\PYG{p}{);}
          \PYG{k}{delete} \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}pendingPromises}\PYG{p}{[}\PYG{n+nx}{message}\PYG{p}{.}\PYG{n+nx}{id}\PYG{p}{];}
        \PYG{p}{\PYGZcb{}}
      \PYG{p}{\PYGZcb{}} \PYG{k}{else} \PYG{k}{if} \PYG{p}{(}\PYG{n+nx}{message}\PYG{p}{.}\PYG{n+nx}{method} \PYG{o}{===} \PYG{n+nx}{proto}\PYG{p}{.}\PYG{n+nx}{PROMISE\PYGZus{}REJECT} \PYG{o}{\PYGZam{}\PYGZam{}} \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}pendingPromises}\PYG{p}{[}\PYG{n+nx}{message}\PYG{p}{.}\PYG{n+nx}{id}\PYG{p}{])} \PYG{p}{\PYGZob{}}
        \PYG{c+c1}{// PROMISE\PYGZus{}REJECT}
        \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}pendingPromises}\PYG{p}{[}\PYG{n+nx}{message}\PYG{p}{.}\PYG{n+nx}{id}\PYG{p}{].}\PYG{n+nx}{reject}\PYG{p}{(}\PYG{k}{new} \PYG{n+nx}{FlowError}\PYG{p}{(}\PYG{n+nx}{message}\PYG{p}{.}\PYG{n+nx}{result}\PYG{p}{,} \PYG{k+kc}{true}\PYG{p}{));}
        \PYG{k}{delete} \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}pendingPromises}\PYG{p}{[}\PYG{n+nx}{message}\PYG{p}{.}\PYG{n+nx}{id}\PYG{p}{];}
      \PYG{p}{\PYGZcb{}} \PYG{k}{else} \PYG{k}{if} \PYG{p}{(}\PYG{n+nx}{message}\PYG{p}{.}\PYG{n+nx}{method} \PYG{o}{===} \PYG{n+nx}{proto}\PYG{p}{.}\PYG{n+nx}{PROMISE\PYGZus{}NOTIFY} \PYG{o}{\PYGZam{}\PYGZam{}} \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}pendingPromises}\PYG{p}{[}\PYG{n+nx}{message}\PYG{p}{.}\PYG{n+nx}{id}\PYG{p}{])} \PYG{p}{\PYGZob{}}
        \PYG{c+c1}{// PROMISE\PYGZus{}NOTIFY}
        \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}pendingPromises}\PYG{p}{[}\PYG{n+nx}{message}\PYG{p}{.}\PYG{n+nx}{id}\PYG{p}{].}\PYG{n+nx}{notify}\PYG{p}{(}\PYG{n+nx}{message}\PYG{p}{.}\PYG{n+nx}{result}\PYG{p}{);}
      \PYG{p}{\PYGZcb{}} \PYG{k}{else} \PYG{p}{\PYGZob{}}
        \PYG{n+nx}{debug}\PYG{p}{(}\PYG{l+s+s1}{\PYGZsq{}Unknown Message Received From Worker: \PYGZpc{}O\PYGZsq{}}\PYG{p}{,} \PYG{n+nx}{message}\PYG{p}{);}
      \PYG{p}{\PYGZcb{}}
    \PYG{p}{\PYGZcb{});}
  \PYG{p}{\PYGZcb{}}

  \PYG{n+nx}{\PYGZus{}requestPassphrase}\PYG{p}{(}\PYG{n+nx}{id}\PYG{p}{,} \PYG{n+nx}{msg}\PYG{p}{)} \PYG{p}{\PYGZob{}}
    \PYG{n+nx}{smalltalk}\PYG{p}{.}\PYG{n+nx}{passphrase}\PYG{p}{(}\PYG{l+s+s1}{\PYGZsq{}PGP Passphrase\PYGZsq{}}\PYG{p}{,} \PYG{n+nx}{msg} \PYG{o}{||} \PYG{l+s+s1}{\PYGZsq{}\PYGZsq{}}\PYG{p}{).}\PYG{n+nx}{then}\PYG{p}{((}\PYG{n+nx}{passphrase}\PYG{p}{)} \PYG{o}{=\PYGZgt{}} \PYG{p}{\PYGZob{}}
      \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}child}\PYG{p}{.}\PYG{n+nx}{send}\PYG{p}{(\PYGZob{}} \PYG{n+nx}{method}\PYG{o}{:} \PYG{n+nx}{proto}\PYG{p}{.}\PYG{n+nx}{PROMISE\PYGZus{}RESOLVE}\PYG{p}{,} \PYG{n+nx}{id}\PYG{p}{,} \PYG{n+nx}{result}\PYG{o}{:} \PYG{n+nx}{passphrase} \PYG{p}{\PYGZcb{});}
      \PYG{n+nx}{debug}\PYG{p}{(}\PYG{l+s+s1}{\PYGZsq{}Passphrase entered\PYGZsq{}}\PYG{p}{);}
    \PYG{p}{\PYGZcb{},} \PYG{p}{()} \PYG{o}{=\PYGZgt{}} \PYG{p}{\PYGZob{}}
      \PYG{k}{this}\PYG{p}{.}\PYG{n+nx}{\PYGZus{}child}\PYG{p}{.}\PYG{n+nx}{send}\PYG{p}{(\PYGZob{}} \PYG{n+nx}{method}\PYG{o}{:} \PYG{n+nx}{proto}\PYG{p}{.}\PYG{n+nx}{PROMISE\PYGZus{}REJECT}\PYG{p}{,} \PYG{n+nx}{id} \PYG{p}{\PYGZcb{});}
      \PYG{n+nx}{debug}\PYG{p}{(}\PYG{l+s+s1}{\PYGZsq{}Passphrase cancelled\PYGZsq{}}\PYG{p}{);}
    \PYG{p}{\PYGZcb{});}
  \PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}

\PYG{k+kr}{export} \PYG{k}{default} \PYG{k}{new} \PYG{n+nx}{WorkerFrontend}\PYG{p}{();}
\end{Verbatim}
